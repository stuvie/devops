#!/bin/sh

staffaccount="steve"
utilities="ansible lshw tcsh tcpdump time locales-all nginx nuttcp finger rwho"

startdir=`pwd`
appdir=`basename $startdir`
bakdir=/bak/fresh
if test `uname` = Darwin; then
	# root filesystem is mounted read-only in MacOS Catalina
	bakdir=/var/bak/fresh
fi

usage() {
	echo usage: sudo ./bin/step1 HOSTNAME IP_ADDRESS && exit 1
}

if test `whoami` != root; then
	echo must be run as root
	usage
fi

if test $# -lt 2; then
	usage
fi

myhost=$1
myipaddress=$2

if test -d $bakdir; then
	echo error: $bakdir already exists && exit 2
fi

echo creating $bakdir
mkdir -p $bakdir || exit 2

./bin/hwinfo > $bakdir/hwinfo-$myhost.txt
./bin/swinfo > $bakdir/swinfo-$myhost.txt
./bin/ifconfigs > $bakdir/ifconfigs-$myhost.txt

if test `uname` = Darwin; then
	if test ! -e /usr/bin/git; then
		echo Please install XCode developer tools first
		exit 0
	fi
	cp -a /private/etc $bakdir
	touch /etc/FRESH_INSTALL
	./bin/setupaccount $staffaccount
	echo securing sshd:
	cp darwin/files/sshd_config /etc/ssh
	cp files/hosts /etc
	chgrp staff /etc/hosts
	chmod 664 /etc/hosts
	cp darwin/files/rc.local /etc
	cp darwin/files/local.startup.plist /Library/LaunchDaemons
	mkdir /usr/local/servers
	chown $staffaccount /usr/local/servers
	ln -s /usr/local/servers /
	ln -s /Volumes /n
	ln -s /usr/local/var/log/nginx /var/log
	ln -s /usr/local/etc/nginx /etc
	ln -s /Users/steve/bin /var/root
	if test $myhost != bluecat; then
		scutil --set HostName $myhost
		scutil --set LocalHostName `echo $myhost | sed 's/\..*//'`
		scutil --set ComputerName $myhost
		dscacheutil -flushcache
	fi
	touch /etc/LOCAL_changes_start
	echo getting hardware info
	system_profiler -detailLevel basic > $bakdir/system-$myhost.txt
	exit 0
fi

cp -a /etc $bakdir
touch /etc/FRESH_INSTALL

if test $myhost = exit; then
	echo quick exit
	exit 0
fi

./bin/setupaccount $staffaccount

DISTRO=`head -n 1 /etc/issue`
case $DISTRO in
*Mint*)
	utilities="ansible git rwho rwhod tcsh nginx-extras mysql-server openssh-server influxdb influxdb-client certbot apache2 nodejs npm"
	# curl -s "https://get.sdkman.io" | bash
	# sdk install springboot
	echo installing updates and utilities:
	set -x
	apt-get update
	apt-get upgrade -y
	apt-get install -y $utilities

	set +x
	bakdir=/bak/step1
	echo creating $bakdir
	mkdir -p $bakdir || exit 2
	cp -a /etc $bakdir
	
	touch /etc/LOCAL_changes_start
	cp files/rc.local /etc
	cp files/hosts /etc
	chgrp $staffaccount /etc/hosts
	chmod 664 /etc/hosts

	cd hostconfigs/mint || exit 2
	sudo dpkg -i files/powerpanel_132_amd64.deb
	
	echo securing sshd:
	cp files/sshd_config /etc/ssh
	systemctl restart ssh
	
	cp files/sudoers /etc
	cp files/services /etc
	cp files/fywss-proxies /etc/nginx
	cp files/default /etc/nginx/sites-available
	systemctl restart nginx
	
	cp files/influxdb.conf /etc/influxdb
	systemctl restart influxdb
	
	cd ../..
	./bin/hwinfo > $bakdir/hwinfo-$myhost-installed.txt
	echo you will want to replace prometheus and node-exporter binaries next
	exit 0
	;;
esac

# below here, we assume you are running Raspbian OS

touch /etc/LOCAL_changes_start
./bin/setupaccount pi
cp files/.??* /root
ln -s /home/steve/bin /root/bin

echo disabling nginx:
sudo systemctl disable nginx
sudo systemctl stop nginx

echo enabling sshd:
sudo systemctl enable ssh
sudo systemctl start ssh
sleep 10 # give it time to start up

echo securing sshd:
cp files/sshd_config /etc/ssh
diff -r $bakdir/etc/ssh/sshd_config /etc/ssh
systemctl restart ssh

cp files/hosts /etc
cp files/services /etc

if ! test $myipaddress = dhcp; then
	cat files/dhcpcd.conf | sed s/10.0.1.5/$myipaddress/ > /etc/dhcpcd.conf
fi

cp files/resolv.conf /etc
cp files/rc.local /etc
echo $myhost > /etc/hostname
hostname $myhost

echo installing updates and utilities:
curl -sL https://repos.influxdata.com/influxdb.key | apt-key add -
echo "deb https://repos.influxdata.com/debian stretch stable" | tee /etc/apt/sources.list.d/influxdb.list

set -x
apt-get update
apt-get upgrade -y
apt-get install -y $utilities telegraf
mkdir /etc/telegraf/orig
cp -p /etc/telegraf/telegraf.conf /etc/telegraf/orig
cp files/telegraf.conf    /etc/telegraf
# cp files/default /etc/nginx/sites-available/default

hw=`./bin/hw`
case $hw in
*Pi\ 4*|*Pi\ 3*)
	echo installing docker on $hw
	curl -fsSL https://get.docker.com -o get-docker.sh
	sh get-docker.sh
	usermod -aG docker pi
	usermod -aG docker $staffaccount
	;;
*Pi\ Zero*|*Pi\ 2*)
	echo not installing docker on low powered $hw
	;;
*)
	echo not installing docker on $hw
	;;
esac
